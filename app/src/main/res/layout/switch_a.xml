<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
  xmlns:app="http://schemas.android.com/apk/res-auto"
  xmlns:tools="http://schemas.android.com/tools"
  android:layout_width="match_parent"
  android:layout_height="match_parent">
  <!--
  相对定位
     横线左边的指当前 view 的方位，右边的是目标 view 的方位
     layout_constraintLeft_toLeftOf
     layout_constraintLeft_toRightOf
  角度定位
    app:layout_constraintCircleAngle="120"（角度）
    app:layout_constraintCircle="@+id/TextView1"
    app:layout_constraintCircleRadius="150dp"（距离）
    以 TextView1 中心点为圆心，以 Y 轴顺时针开始算，当前 View 的中心在其 120 度
  margin
    在使用 margin 的时候要注意两点
      控件必须在布局里约束一个相对位置
      margin 只能大于等于 0
  goneMargin
    goneMargin 主要用于约束的控件可见性被设置为 gone 的时候使用的 margin 值
  baseLine
    layout_constraintBaseline_toBaselineOf 基线指中间对齐
  调整位置
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintLeft_toLeftOf="parent"
    app:layout_constraintRight_toRightOf="parent"
    app:layout_constraintTop_toTopOf="parent"
             完全居中在 parent 中
    水平居中
       app:layout_constraintLeft_toLeftOf="parent"
       app:layout_constraintRight_toRightOf="parent"
    垂直居中
     app:layout_constraintTop_toTopOf="parent"
     app:layout_constraintBottom_toBottomOf="parent"
    偏移
      app:layout_constraintHorizontal_bias="0.7"
      范围是 0~1，越靠近 1，越往右，越靠近 0，越往左
      垂直同理
  match_parent
    官方不推荐在 ConstraintLayout 中使用 match_parent，可以设置 0dp (MATCH_CONSTRAINT) 配合约束代替
    match_parent
  宽高比
    当宽或高至少有一个尺寸被设置为 0dp 时，可以通过属性 layout_constraintDimensionRatio 设置宽高比
    在设置宽高比的值的时候，还可以在前面加 W 或 H，分别指定宽度或高度限制
    app:layout_constraintDimensionRatio="H,2:3" 指的是 宽:高=2:3
    app:layout_constraintDimensionRatio="W,2:3" 指的是 宽:高=2:3
  链
    如果两个或以上控件通过下图的方式约束在一起，就可以认为是他们是一条链
    3 个 TextView 相互约束，两端两个 TextView 分别与 parent 约束，成为一条链
    在链头中设置 layout_constraintHorizontal_chainStyle 来改变整条链的样式
    spread —— 展开元素 (默认)
    spread_inside —— 展开元素，但链的两端贴近parent
    packed —— 链的元素将被打包在一起(紧靠在一起)
    这时宽度或高度为 0 dp 时，可以设置 layout_constraintHorizontal_weight 权重
  优化测量
    当我们使用 MATCH_CONSTRAINT 时，ConstraintLayout 将对控件进行 2 次测量
    ConstraintLayout在 1.1 中可以通过设置 layout_optimizationLevel 进行优化，可设置的值有：
    none：无优化
    standard：仅优化直接约束和屏障约束（默认）
    direct：优化直接约束
    barrier：优化屏障约束
    chain：优化链约束
    dimensions：优化尺寸测量
  屏障(适合用作动态宽高的场景)
    假设有 3 个控件 ABC，C 在 AB 的右边，但是 AB 的宽是不固定的，这个时候 C 无论约束在 A 的右边或者 B 的
    右边都不对。当出现这种情况可以用 Barrier 来解决。Barrier 可以在多个控件的一侧建立一个屏障
    <android.support.constraint.Barrier
          android:id="@+id/barrier"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          app:barrierDirection="right"
          app:constraint_referenced_ids="TextView1,TextView2" />
    app:barrierDirection 为屏障所在的位置，可设置的值有：bottom、end、left、right、start、top
    app:constraint_referenced_ids 为屏障引用的控件，可设置多个(用“,”隔开)
  分组
    Group可以把多个控件归为一组，方便隐藏或显示一组控件，这些控件可以不在 Group 标签内
          <android.support.constraint.Group
          android:id="@+id/group"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:visibility="invisible"
          app:constraint_referenced_ids="TextView1,TextView3" />
  占位符
     新建一个 Placeholder 约束在屏幕的左上角，新建一个 TextView 约束在屏幕的右上角，在 Placeholder
     中设置 app:content="@+id/textview"，这时 TextView 会跑到屏幕的左上角

    <android.support.constraint.Placeholder
          android:id="@+id/placeholder"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          app:content="@+id/textview"
          app:layout_constraintLeft_toLeftOf="parent"
          app:layout_constraintTop_toTopOf="parent" />
      <TextView
          android:id="@+id/textview"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:background="#cccccc"
          android:padding="16dp"
          android:text="TextView"
          android:textColor="#000000"
          app:layout_constraintRight_toRightOf="parent"
          app:layout_constraintTop_toTopOf="parent" />
  GuideLine
      辅助线，主要是帮助预览时完成布局的(不会显示在界面上，类似 tools)，在界面上点击时会切换不同的模式
      <android.support.constraint.Guideline
      android:id="@+id/guideline1"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:orientation="horizontal"
      app:layout_constraintGuide_begin="51dp" />

      android:orientation          方向
      layout_constraintGuide_begin 开始位置
      layout_constraintGuide_end   结束位置
      layout_constraintGuide_percent 距离顶部的百分比 (orientation = horizontal 时则为距离左边)
  -->
  <TextView
    android:id="@+id/TextView1"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:text="1111"
    app:layout_constraintHorizontal_chainStyle="spread"
    app:layout_constraintHorizontal_weight="2"
    app:layout_constraintLeft_toLeftOf="parent"
    app:layout_constraintRight_toLeftOf="@+id/TextView2" />

  <TextView
    android:id="@+id/TextView2"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:text="2222"
    app:layout_constraintHorizontal_chainStyle="spread_inside"
    app:layout_constraintHorizontal_weight="1"
    app:layout_constraintLeft_toRightOf="@+id/TextView1"
    app:layout_constraintRight_toLeftOf="@+id/TextView3"
    app:layout_constraintRight_toRightOf="parent"
    app:layout_optimizationLevel="direct" />

  <TextView
    android:id="@+id/TextView3"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:text="3333"
    app:layout_constraintHorizontal_chainStyle="packed"
    app:layout_constraintHorizontal_weight="3"
    app:layout_constraintLeft_toRightOf="@+id/TextView2"
    app:layout_constraintRight_toRightOf="parent" />

</android.support.constraint.ConstraintLayout>